"" Zuri's ideavimrc

"" This file is catered to my personal use case and borrowed several ideas from the neovim kickstart file.

"" Base Settings
"" ================================================================================

"" Leader
let mapleader = " "

"" Line Numbering
set number relativenumber

"" Don't show the mode, since it's already in the widget
unset showmode

"" Sync clipboard between os and ideavim.
set clipboard+=unnamedplus
set clipboard+=ideaput

"" Ensure <c-c> <c-v> are captured by the ide and not ideavim.
"" NOTE: there is no equivalent in neovim.
sethandler <c-c> a:ide
sethandler <c-v> a:ide

"" Enable break indent
set breakindent

"" History
set history=1000

"" Case-insensitive searching UNLESS \C or one or more capital letters in the search term
set ignorecase
set smartcase

set notimeout

"" Sets if displaying whitespace characters in the editor
set list

"" Show which line your cursor is on
set cursorline

"" Minimum number of lines above and below the cursor.
set scrolloff=10

"" show information about about cmd
set showcmd

"" No bell
set visualbell

"" ideavim settings
set ideajoin
set ideamarks
set idearefactormode=select


"" set global mode
set ideaglobalmode

nnoremap \e :e ~/.ideavimrc<CR>
let g:WhichKeyDesc_ideavimfile = "\\e open .ideavimrc"
nmap \r <Action>(IdeaVim.ReloadVimRc.reload)
let g:WhichKeyDesc_ideavimreload = "\\r reload .ideavimrc"

"" [[Basic Keymaps]]
"" ================================================================================

"" Set highlight on search, but clear with esc in normal mode.
set hlsearch
nmap <Esc> :noh<CR>

"" find and replace
set incsearch
set gdefault

"" Diagnostic keymaps
nmap ]d <Action>(GotoNextError)
let g:WhichKeyDesc_diagnostics_go_to_next_error = "]d Go to next [D]iagnostic message"
nmap [d <Action>(GotoPreviousError)
let g:WhichKeyDesc_diagnostics_go_to_previous_error = "[d Go to previous [D]iagnostic message"
nmap <leader>e <Action>(ShowErrorDescription)
let g:WhichKeyDesc_diagnostics_error_description = "<leader>e Show diagnostic [E]rror me"
nmap <leader>q <Action>(ShowIntentionActions)
let g:WhichKeyDesc_diagnostics_quick_fix = "<leader>q Open [Q]uickFix list"

"" Keybinds to make split navigation easier.
sethandler <c-j> a:vim
sethandler <c-k> a:vim
sethandler <c-h> a:vim
sethandler <c-l> a:vim
nnoremap <c-h> <C-w>h
nnoremap <c-l> <C-w>l
nnoremap <c-k> <C-w>k
nnoremap <c-j> <C-w>j

"" Plugin Settings
"" ================================================================================

"" Highlight when yanking (copying text)
set highlightedyank

"" easymotion moves
set easymotion

"" quickscope allows you to see the scope of your f, F, t, and T movements.
set quickscope

"" Surround allows you to quickly change the surrounding characters of a text element.
set surround

"" NERDTree is a file explorer plugin that allows you to explore your project files.
set NERDTree

"" multicursor allows you to have multiple cursors in the editor.
set multicursor

"" replace with register allows you to replace text with the contents of a register.
set ReplaceWithRegister

"" textobj-entire allows you to select the entire buffer with ie and ae.
set textobj-entire

"" which-key allows you to see the keybindings available in the current context.
set which-key


" Which-key settings
"" ========================================================
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#f335b2"
let g:WhichKey_SortOrder = "by_key_prefix_first"

" QuickScope settings
"" ========================================================

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let g:qs_accepted_chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
    's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '[', ']', '{', '}',
    '(', ')', '*', '&', '%' ,'$']

"" IDE Search/Find

let g:WhichKeyDesc_find = "<leader>f [F]ind"
nmap <leader>ff <Action>(GotoFile)
let g:WhichKeyDesc_find_file = "<leader>ff [F]ind [F]iles"
map <leader>fg <Action>(FindInPath)
let g:WhichKeyDesc_find_by_grep = "<leader>fg [F]ind by [G]rep"
nmap <leader>fw viw<leader>fg
let g:WhichKeyDesc_find_word = "<leader>fw [F]ind [w]ord"
nmap <leader>fW viW<leader>fg
let g:WhichKeyDesc_find_whole_word = "<leader>fW [F]ind [W]ord"
nmap <leader>fr <action>(RecentFiles)
let g:WhichKeyDesc_find_show_recent_files = "<leader>fr [F]ind [R]ecent"
nmap <leader>fl <action>(RecentLocations)
let g:WhichKeyDesc_find_show_recent_locations = "<leader>fl [F]ind recent [L]ocations"

"" Go to code
nmap gd <action>(GotoDeclaration)
nmap gy <action>(GotoTypeDeclaration)
nmap gi <action>(GotoImplementation)
nmap gu <action>(ShowUsages)
nmap gt <action>(GotoTest)
nmap gs <action>(GotoSuperMethod)
nmap gb <action>(Back)
nmap gf <action>(Forward)
nmap ge <Action>(GotoNextError)
nmap gE <Action>(GotoPreviousError)


"" Refactor
let g:WhichKeyDesc_refactoring = "<leader>r [R]efactoring"
nmap <leader>rf <action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_refactoring_menu = "<leader>rf [R]e[f]actoring menu"
nmap <leader>rn <action>(RenameElement)
let g:WhichKeyDesc_refactoring_rename = "<leader>rn [R]e[n]ame element"

"" Code Actions
nmap <leader>ca <Action>(ShowIntentionActions)
let g:WhichKeyDesc_diagnostics_quick_action_menu = "<leader>ca [C]ode [A]ction"
nmap <leader>ci <action>(QuickImplementations)
let g:WhichKeyDesc_action_description = "<leader>ci Open [C]ode [I]mplementation Popup"

"" Show hover information
nmap <S-k> <action>(QuickJavaDoc)

"" Window/pane navigation
"" =======================================================

" Tab navigation use alt-arrows better
nnoremap <TAB> :tabnext<CR>
nnoremap <s-TAB> :tabprev<CR>

" Close tabs
nmap <Leader>x <action>(CloseContent)
let g:WhichKeyDesc_close_editor = "<leader>x [X]Close current editor"



"" Window options
nmap <leader>w\ <action>(SplitVertically)
nmap <leader>w- <action>(SplitHorizontally)
nmap <leader>wu <action>(Unsplit)
nmap <leader>wm <action>(MoveEditorToOppositeTabGroup)
nmap <leader>wo <action>(OpenEditorInOppositeTabGroup)
nmap <leader>wz <action>(MaximizeEditorInSplit)
nmap <leader>wt <action>(HideAllWindows)
nmap <S-ESC> <action>(HideAllWindows)
nmap <Leader>wn <action>(EditSourceInNewWindow)
let g:WhichKeyDesc_windows           = "<leader>w [W]indows"
let g:WhichKeyDesc_windows_unsplit   = "<leader>wu Merge/[U]nsplit"
let g:WhichKeyDesc_windows_move      = "<leader>wm [M]ove to oposite split"
let g:WhichKeyDesc_windows_open      = "<leader>wo [O]pen in oposite split"
let g:WhichKeyDesc_windows_maximize  = "<leader>wz Maximi[z]e current split"
let g:WhichKeyDesc_windows_hide      = "<leader>wt [T]oggle all tool windows"
let g:WhichKeyDesc_windows_split_hor = "<leader>w- Split [H]orizontally"
let g:WhichKeyDesc_windows_split_ver = "<leader>w\\ Split [V]ertically"
let g:WhichKeyDesc_windows_new       = "<leader>wn Open in [n]ew window"

"" Display options
nmap <leader><S-d>d <action>(ToggleDistractionFreeMode)
nmap <leader><S-d>z <action>(ToggleZenMode)
nmap <leader><S-d>f <action>(ToggleFullScreen)
let g:WhichKeyDesc_display_options                 = "<leader>D [D]isplay Options"
let g:WhichKeyDesc_display_options_distractionfree = "<leader>Dd [D]istraction Free Mode"
let g:WhichKeyDesc_display_options_zen             = "<leader>Dz [Z]en Mode"
let g:WhichKeyDesc_display_options_fullscreen      = "<leader>Df [F]ullscreen Mode"

" Terminal
nmap <leader>t <action>(ActivateTerminalToolWindow)
let g:WhichKeyDesc_terminal = "<leader>t Activate [t]erminal pane"
" move to editor with esc"
" close terminal pane with s-esc"

" Open NERDTree (use q to exit)
nmap <leader>p <action>(ActivateProjectToolWindow)
let g:WhichKeyDesc_project_pane = "<leader>p Activate [p]roject tree pane"

"" Create new element (class, file, etc) in same folder as current
nmap <leader>n <action>(NewElement)
let g:WhichKeyDesc_new = "<leader>n [N]ew element"

"" Editing text and moving around
"" ========================================================

"" easy indent
vnoremap < <gv
vnoremap > >gv

"" jumping with easymotion
"" ================================================================================

"" Use easymotion s mode
map <leader>j <Plug>(easymotion-s)
let g:WhichKeyDesc_easymotion_jump = "<leader>j [J]ump with easymotion"

"" Comment lines
map <leader>/ <action>(CommentByLineComment)
let g:WhichKeyDesc_comment = "<leader>/ [/]Toggle comment"


"" Folding
nmap zc <action>(CollapseRegion)
nmap zo <action>(ExpandRegion)
nmap <leader>zc <action>(CollapseAllRegions)
nmap <leader>zo <action>(ExpandAllRegions)
let g:WhichKeyDesc_fold       = "<leader>z [Z]Folding"
let g:WhichKeyDesc_fold_all   = "<leader>zc Fold all regions"
let g:WhichKeyDesc_unfold_all = "<leader>zo Unfold all regions"

"" Code Actions
nmap <leader>cg <action>(Generate)
nmap <leader>cf <action>(ReformatCode)
nmap <leader>co <action>(OptimizeImports)
nmap <leader>cs <action>(FileStructurePopup)
nmap <leader>cw <action>(EditorToggleUseSoftWraps)
nmap <leader>c<S-s> <action>(SaveAll)
let g:WhichKeyDesc_code            = "<leader>c [C]ode"
let g:WhichKeyDesc_code_save       = "<leader>cS [S]ave All"
let g:WhichKeyDesc_code_structure  = "<leader>cs [s]tructure popup"
let g:WhichKeyDesc_code_generating = "<leader>cg [G]enerate menu"
let g:WhichKeyDesc_code_format     = "<leader>cf Re[f]ormat Code"
let g:WhichKeyDesc_code_optimize   = "<leader>co [O]ptimize Imports"
let g:WhichKeyDesc_code_wrap       = "<leader>cw Toggle [W]rap"

" Git Actions
nmap <leader>gc <action>(CheckinProject)
nmap <leader>gs <action>(ActivateVersionControlToolWindow)
nmap <leader>gb <action>(Git.Branches)
let g:WhichKeyDesc_git          = "<leader>g [G]it operations"
let g:WhichKeyDesc_git_commit   = "<leader>gc Open [G]it [c]ommit dialog"
let g:WhichKeyDesc_git_status   = "<leader>gs Open [G]it [s]tatus dialog"
let g:WhichKeyDesc_git_branches = "<leader>gb Open [G]it [b]ranches list"

" Run
nmap <leader>Rc <action>(RunClass)
nmap <leader>Rm <action>(RunMenu)
nmap <leader>Rb <action>(ToggleLineBreakpoint)
nmap <leader>Ra <action>(RunAnything)
let g:WhichKeyDesc_run_menu        = "<leader>R [R]un and debug"
let g:WhichKeyDesc_run_class       = "<leader>Rc [R]un current [c]lass"
let g:WhichKeyDesc_run_menu_popup  = "<leader>Rm open [R]un [m]enu"
let g:WhichKeyDesc_run_breakpoint  = "<leader>Rb toggle [R]un [b]reakpoint"
let g:WhichKeyDesc_run_anything    = "<leader>Ra [R]un anything"


" Bookmarks
nmap <leader>me <action>(ShowBookmarks)
nmap <leader>mb <action>(ToggleBookmark)
let g:WhichKeyDesc_bookmark        = "<leader>m Book[m]arks"
let g:WhichKeyDesc_bookmark_show   = "<leader>me Show book[m]arks editor"
let g:WhichKeyDesc_bookmark_toggle = "<leader>mb Book[m]ark [t]oggle on location"

"" jetbrains ai assistant
nmap <leader>ia  <action>(ActivateAIAssistantToolWindow)
let g:WhichKeyDesc_ia            = "<leader>i Jetbrains A[I]"
let g:WhichKeyDesc_ia_toolwindow = "<leader>ia Open [A]I toolwindow"
